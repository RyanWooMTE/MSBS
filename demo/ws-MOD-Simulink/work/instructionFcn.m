function instructionFcn(step,level)
% step is the model step, 1 to 10
% level is 0 (standard) or 1 (advanced)
formatStr='%s\n\n';
switch step
    case 1
        if ~level
            mystr=sprintf(formatStr,...
               '1. Open the Simulink Library browser.',...
               '2. Add a Constant block from ''Sources.''',...
               '3. Add a Second Order Integrator block from ''Continuous.''',...
               '4. Add a Scope from ''Sinks.''',...
               '5. Add a Terminator block from ''Sinks.''',...
               '6. Connect the blocks.',...
               '7. Change the constant value to -9.8.',...
               '8. Press the Play button and double-click the Scope to view the results.',...
               '9. Save your model.');
            h = msgbox(mystr,'Step 1 Instructions (Construction Basics)','help');
        else
            mystr=sprintf(formatStr,...
               '1. Automatically align/distribute/resize the blocks. (Be sure to save first.)',...
               '2. Hide the Integrator and Terminator block names.',...
               '3. Play with the keyboard and mouse shortcuts for zooming and panning.');
            h = msgbox(mystr,'Step 1 Instructions (Advanced)','help');
        end
    case 2
        if ~level
            mystr=sprintf(formatStr,...
                '1. Label acceleration, velocity, and position signals by double-clicking on the signal.',...
                '2. Rename the Constant block to ''gravity.''',...
                '3. Define the inital condition of the position (in the Integrator block) to be 500 and the velocity to be 5.',...
                '4. Change simulation stop time to 100 seconds.',...
                '5. Find a way to stop the simulation automatically when the position reaches 0.  (Hint #1: Look in "Sinks" for a way to "Stop" the simulation.  Hint #2: Look in "Logic and Bit Operations" for help with the stop "condition." Note the output data type for the condition block & the input type for the "Stop" block.)',...
                '6. Run your model to make sure it stops when the position reaches 0.',...
                '7. From the ''Simulation'' menu, choose ''Configuration Parameters.'' Change the numerical solver to ode23 and make the max step size 1 second.');
            h = msgbox(mystr,'Step 2 Instructions (Controlling Simulation)','help');
        else
            mystr=sprintf(formatStr,...
                '1. Does the simultation stop exactly when the position is 0? Disable zero-crossing detection in the Compare to Constant block.',...
                '2. In the Scope parameters, turn off the limit on the number of data points plotted. (Look in the Data History tab.)',...
                '3. Plot the position and velocity as separate axes in the same scope.',...
                '4. Using the Model Explorer, set up your own default Configuration Parameters.');
            h = msgbox(mystr,'Step 2 Instructions (Advanced)','help');
        end
    case 3
        if ~level
            mystr=sprintf(formatStr,...
               '1. Make gravity a 3 element vector, [0 0 -9.8].',...
               '2. Turn on the labels for signal dimensions. From the "Format" menu, go to Port/Signal Displays and select Signal dimensions. Press Ctrl+D to update your diagram.',...
               '3. Modify initial conditions of position to [0 0 500] and velocity to [8 -10 5].',...
               '4. Run the simulation and observe results. Why does the simulation stop right away?',...
               '5. Use the Selector block from the Signal Routing library to select the third element of the position signal. Label the output "altitude" and connect it to the Compare to Zero block.',...
               '6. Open the Scope Parameter menu by clicking the second icon in the toolbar. Turn on Legends.');
            h = msgbox(mystr,'Step 3 Instructions (Vectorizing Signals & Model Hierarchy)','help');
        else
            mystr=sprintf(formatStr,...
               '1. Supplement your scopes with Simulink signal viewers.  Right-click on the signal, go to ''Create & Connect Viewer'' and select a Simulink viewer.',...
               '2. Save the scope''s data to the workspace via the History tab of the Scope Parameter menu. Select "Inspect Logged Signals" from the model Tool menu and use the Data Inspector to visualize results.' );
            h = msgbox(mystr,'Step 3 Instructions (Advanced)','help');
        end
    case 4
        if ~level
            mystr=sprintf(formatStr,...
                '1. Open drag_library.mdl.',...
                '2. Drag the Variable Density subsystem to your falling object model. Invert it by typing Ctrl+I',...
                '3. Set the Library Link Display to ''User'' via the Format menu.',...
                '4. Connect your altitude and velocity signals to the drag inports.',...
                '5. Use a Gain block to scale the output signal of the drag model by 1/m. Why?',...
                '6. Use a Sum block to add drag and gravitational acceleration together. Connect the cumulative result to the Integrator.',...
                '7. Define the parameters in MATLAB: Cd = 0.333; A = 1.5; m = 150;');
            h = msgbox(mystr,'Step 4 Instructions (Library Basics)','help');
        else
            mystr=sprintf(formatStr,...
                '1a. Find the ''Adding Libraries to the Library Browser'' section of Help.',...
                '1b. Create an slblocks.m file that adds the drag library to the Simulink Browser.',...
                '2a. Disable the link to the library by right-clicking on the block from within your lander model.',...
                '2b. Make changes to the disabled library then push them to the library file by Resolving the Link.');
            h = msgbox(mystr,'Step 4 Instructions (Advanced)','help');
        end
    case 5
        if ~level
            mystr=sprintf(formatStr,...
                '1. Open drag_library.mdl and unlock the library via the Edit menu.',...
                '2. Right-click on Variable Density Model and choose "Create Mask."',...
                '3. Right-click on Constant Density Model and choose "Edit Mask."',...
                '4. Create a mask on Variable Density similar to the one on Constant Density.',...
                '5. Save drag_library.mdl and update your main model.',...
                '6. From the menu, go to "File", "Model Properties." Click on the callbacks tab and select "PostLoadFcn." Type MATLAB code to define the mass variable "m" in the given field.');
            h = msgbox(mystr,'Step 5 Instructions (Masking Subsystems)','help');
        else
            mystr=sprintf(formatStr,...
               '1. Define the mass in the model workspace.',...
               '2a. Add a configurable subsystem template to the drag library and make drag a configurable subsystem in your model.',...
               '2b. Use the set_param command to programmatically switch between the two drag model configurations.',...
               '3a. Open variant_drag.mdl and observe a Variant Subsystem. Add this block to your Simulink model.',...
               '3b. Right-click on block to check Subsystem Parameters and override variant choice.' );
            h = msgbox(mystr,'Step 5 Instructions (Advanced)','help');
        end
    case 6
        if ~level
            mystr=sprintf(formatStr,...
                '1. Click and hold the mouse as you drag the cursor across the model. Make sure all blocks are selected.',...
                '2. Convert to a subsystem by right-clicking on one of the blocks and selecting "Create Subsystem." Name the subsystem "Plant."',...
                '3. Double-click on Plant to open it. Go to Sources in the library browser and add an inport ("In1") to Plant and name it "thrust."',...
                '4. Add the thrust to the gravity and drag accelerations (remember to also scale it by 1/m). At the root level, make thrust a constant set to [0 0 1000].',...
                '5. From the Signal Routing library, grab a Bus Creator block and put it in the Plant subsystem. Connect the position and velocity signals to the Bus Creator inputs. Feed this bus into a new outport named "State".',...
                '6. Move the scope blocks from the Plant subsystem to the top model layer. Use a Bus Selector block at the root level to get the position and velocity signals back out of the bus and connect them to the Scopes.',...
                '7. Run your model and observe the signal lines.');
            h = msgbox(mystr,'Step 6 Instructions (Buses)','help');
        else
            mystr=sprintf(formatStr,...
               '1. Name the bus signal and log it to the workspace. How are the data stored?',...
               '2. Use From and Goto blocks to connect position and velocity to the Bus Creator.');
            h = msgbox(mystr,'Step 6 Instructions (Advanced)','help');
        end
    case 7
        if ~level
            mystr=sprintf(formatStr,...
                '1. Change the constant ''thrust'' block to ''desired velocity'' and set it to [0 0 -0.5].',...
                '2. Add a Sum block and set the second sign to negative.',...
                '3. Difference desired velocity with velocity and label the Sum''s output as ''error.''',...
                '4. Add a PID Controller block in the Continuous library and make ''error'' its input. Supply its output to the Plant model.',...
                '5. Double-click on the Controller block and set the controller to PI. Set the gains to 50 and 5.',...
                '6. Create a subsystem that includes the reference velocity, sum block, and PID block. Label this subsystem ''Controller.''',...
                '7. Connect Scopes to ''thrust'' and ''error.''',...
                '8. Show the block execution order. Go to the menu, under Format, Block Displays, choose Sorted Order. Update the diagram with Ctrl+D.',...
                '9. Right-click on the Controller subsystem and go to Subsystem Parameters. Check the box for ''Treat as atomic unit.'' Update the diagram.');
            h = msgbox(mystr,'Step 7 Instructions (More on Subsystems)','help');
        else
            mystr=sprintf(formatStr,...
                '1. Make the Plant subsystem an atomic subsystem too. Update the diagram. What error do you get?',...
                '2. Add a Unit Delay block to the feedback from the Plant to the Controller.',...
                '3. Alternatively, in the Plant Subsystem Parameters, check the box for ''Minimize algebraic loop occurences.'' Update/play model. Uncheck that box in the Plant subsystem and try checking it in the Controller subsystem. Do you get an error?',...
                '4. Uncheck the algebraic loop box in the Controller subsystem and change the Plant back to a virtual subsystem.',...
                '5. Use the Simulink Debugger to view block execution order.');
            h = msgbox(mystr,'Step 7 Instructions (Advanced)','help');
        end
    case 8
        if ~level
            mystr=sprintf(formatStr,...
                '1. Right-click on the Controller subsystem and select ''Convert to Model Block.'' Take note of any errors or warnings you get, but continue the conversion.',...
                '2. Delete the Controller subsystem and drag in the block from the newly created model, untitled.mdl.',...
                '3. Double-click on the new Controller block. Open up the Plant subsystem. What do you notice about the title bars of each? Also look in the Current Directory Browser.',...
                '4. Go to Configuration Parameters for the Controller model. Under Optimization -> Signals and Parameters, check "Inline parameters." Run the simulation.',...
                '5. Right-click on the Controller Model block and select "ModelReference Parameters". Change the Simulation Mode from Normal to Accelerator. Run the simulation',...
                '6. Open the Controller, and check the error scope. What do you see? What do you notice about the time it takes the model to simulate?');
            h = msgbox(mystr,'Step 8 Instructions (Referencing Models)','help');
        else
            mystr=sprintf(formatStr,...
                '1. What files are needed to run your model now? Check out Tools -> Model Dependencies -> Model Dependency Viewer and Generate Manifest.',...
                '2. What''s the command line way to convert an atomic subsystem to a model reference? Can you go back to a subsystem from a model?');
            h = msgbox(mystr,'Step 8 Instructions (Advanced)','help');
        end
    case 9
        if ~level
            mystr=sprintf(formatStr,...
                '1. Double-click on the PI Controller. Set the Time-domain to Discrete. Set the sample time to 0.5.',...
                '2. In the main model, Set Sample Time Display to "Color" via the Format menu. Note the error message.',...
                '3. Double-click the Controller''s thrust outport and set the Sample Time to inherited via the Signal Attributes tab. Update the diagram.',...
                '4. Double-click the Controller''s velocity inport and set the Sample Time to inherited via the Signal Attributes tab. Update the diagram.',...
                '5. Add Rate Transition blocks from the Signal Attributes library before and after the referenced model. Update the diagram.',...
                '6. Change the Controller''s Solver options to Fixed Step Discrete to avoid warnings.');
            h = msgbox(mystr,'Step 9 Instructions (Controlling Sample Rates)','help');
        else
            mystr=sprintf('%s\n\n',...
                '1. What if you had continuous states in your referenced model?',...
                '2. What are some ways to organize your configuration sets? Try using cset=Simulink.ConfigSet to create the configuration sets to be used in each of your models and then load that configuration set in a callback and point your model to it.');
            h = msgbox(mystr,'Step 9 Instructions (Advanced)','help');
        end
    case 10
        if ~level
            mystr=sprintf(formatStr,...
                '1. Change the Controller such that desired velocity is a function of altitude. Right-click on the reference model, select ModelReference parameters, and change the Model Name to ''Controller_Step_11.'' Note the inport''s use of stateBus in the Signal Attributes.',...
                '2. Change the input to the Controller; supply State instead of velocity.',...
                '3. Go to Tools -> Bus Editor and create a new bus named stateBus. It should have two signals in it, one called position with has dimension of 3 and one called velocity which has dimension of 3. Hit Apply and look in your workspace for the new bus object.',...
                '4. Save stateBus to a mat file. Add a ''load <mat file>'' to the main model''s PostLoadFcn.',...
                '5. Run your model and see how it looks!');
            h = msgbox(mystr,'Step 10 Instructions (Embedded MATLAB and Bus Objects)','help');
        else
            mystr=sprintf(formatStr,...
                '1. When would you want to use MATLAB Function and when would you want to use an S-Function?',...
                '2. Generate C code from your Controller.',...
                '3. Generate PLC code from your Controller.',...
                '4. Generate HDL code from your Controller.');
            h = msgbox(mystr,'Step 10 Instructions (Advanced)','help');
        end
            
end

S = get(h,'Position');
set(h,'Position',1.2*S);
h1 = get(h,'Children');
h2 = get(h1(2),'Children');
set(h2,'FontSize',10);