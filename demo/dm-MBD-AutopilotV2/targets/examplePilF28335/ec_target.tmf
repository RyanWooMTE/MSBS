# Embedded Coder Target Template Makefile (ec_target.tmf)
#
# - You can use this template makefile (TMF) as the basis for your own 
#   PIL implementation.
# - The intent is that you should not have to modify this example TMF 
#   to create your own PIL implementation.
# - This TMF abstracts embedded tooling information by
#   including target_tools.mk
# - To create a PIL implementation for your own processor, you will
#   need to modify the target_tools.mk to specify the appropriate
#   embedded tools and options. 
#
# Copyright 2009-2011 The MathWorks, Inc.

# Include file with user dependent settings 
# TARGET_LIB_INCS - inc dir
# TARGET_LIB_SRCS - src dir
# TARGET_BLOCKS - dir
# TARGET_BLOCK_SRCS - src files
# CC
# CFLAGS
# CXX
# CXXFLAGS
# OBJ_EXT - object file extension
# LD
# LDFLAGS
# PROGRAM_FILE_EXT (e.g .elf)
# AR
# ARFLAGS
# OBJCOPY - format converter
# OBJCOPYFLAGS
# BINARY_FILE_EXT  (e.g. .hex or .mot)
# EXE_FILE_EXT = $(BINARY_FILE_EXT) or $(PROGRAM_FILE_EXT) - build product ext.

#--------------------- Autogenerated paths makefile ----------------------------
-include target_paths.mk
-include ..\target_paths.mk

#--------------------- Handwritten tools makefile __----------------------------
-include $(TARGETTOOLSMKDIR)\target_tools.mk

#------------------------ Macros read by make_rtw ------------------------------
MAKECMD             = gmake
HOST                = ANY
BUILD               = yes
SYS_TARGET_FILE     = any
MAKEFILE_FILESEP = /
COMPILER_TOOL_CHAIN = default
#---------------------- Tokens expanded by make_rtw ----------------------------

MODEL                   = |>MODEL_NAME<|
MODULES                 = |>MODEL_MODULES<|
MAKEFILE                = |>MAKEFILE_NAME<|
MATLAB_ROOT             = |>MATLAB_ROOT<|
ALT_MATLAB_ROOT         = |>ALT_MATLAB_ROOT<|
MASTER_ANCHOR_DIR       = |>MASTER_ANCHOR_DIR<|
START_DIR               = |>START_DIR<|
S_FUNCTIONS             = |>S_FUNCTIONS<|
S_FUNCTIONS_LIB         = |>S_FUNCTIONS_LIB<|
NUMST                   = |>NUMST<|
NCSTATES                = |>NCSTATES<|
COMPUTER                = |>COMPUTER<|
BUILDARGS               = |>BUILDARGS<|
MULTITASKING            = |>MULTITASKING<|
INTEGER_CODE            = |>INTEGER_CODE<|
MAT_FILE                = |>MAT_FILE<|
ONESTEPFCN              = |>COMBINE_OUTPUT_UPDATE_FCNS<|
TERMFCN                 = |>INCLUDE_MDL_TERMINATE_FCN<|
B_ERTSFCN               = |>GENERATE_ERT_S_FUNCTION<|
MEXEXT                  = |>MEXEXT<|
EXT_MODE                = |>EXT_MODE<|
TMW_EXTMODE_TESTING     = |>TMW_EXTMODE_TESTING<|
EXTMODE_TRANSPORT       = |>EXTMODE_TRANSPORT<|
EXTMODE_STATIC          = |>EXTMODE_STATIC_ALLOC<|
EXTMODE_STATIC_SIZE     = |>EXTMODE_STATIC_ALLOC_SIZE<|
MULTI_INSTANCE_CODE     = |>MULTI_INSTANCE_CODE<|
TGT_FCN_LIB             = |>TGT_FCN_LIB<|
MODELREFS               = |>MODELREFS<|
SHARED_SRC              = |>SHARED_SRC<|
SHARED_SRC_DIR          = |>SHARED_SRC_DIR<|
SHARED_BIN_DIR          = |>SHARED_BIN_DIR<|
SHARED_LIB              = |>SHARED_LIB<|
GEN_SAMPLE_MAIN         = |>GEN_SAMPLE_MAIN<|
TARGET_LANG_EXT         = |>TARGET_LANG_EXT<|
PORTABLE_WORDSIZES      = |>PORTABLE_WORDSIZES<|
SHRLIBTARGET            = |>SHRLIBTARGET<|
OPTIMIZATION_FLAGS      = |>OPTIMIZATION_FLAGS<|
ADDITIONAL_LDFLAGS      = |>ADDITIONAL_LDFLAGS<|
MAKEFILEBUILDER_TGT     = |>MAKEFILEBUILDER_TGT<|
STANDALONE_SUPPRESS_EXE = |>STANDALONE_SUPPRESS_EXE<|

#--------------------------- Model and reference models -----------------------
MODELLIB                  = |>MODELLIB<|
MODELREF_LINK_LIBS        = |>MODELREF_LINK_LIBS<|
MODELREF_INC_PATH         = |>START_MDLREFINC_EXPAND_INCLUDES<|-I|>MODELREF_INC_PATH<| |>END_MDLREFINC_EXPAND_INCLUDES<|
RELATIVE_PATH_TO_ANCHOR   = |>RELATIVE_PATH_TO_ANCHOR<|
MODELREF_TARGET_TYPE      = |>MODELREF_TARGET_TYPE<|

#-- In the case when directory name contains space ---
ifneq ($(MATLAB_ROOT),$(ALT_MATLAB_ROOT))
MATLAB_ROOT := $(ALT_MATLAB_ROOT)
endif

MATLAB_ROOT := $(subst \,/,$(MATLAB_ROOT))

#------------------------------ Includes -------------------------------------
# Place -I options here
MATLAB_INCLUDES = \
	-I$(MATLAB_ROOT)/rtw/c/ert \
	-I$(MATLAB_ROOT)/extern/include \
	-I$(MATLAB_ROOT)/simulink/include \
	-I$(MATLAB_ROOT)/rtw/c/src \
	-I$(MATLAB_ROOT)/rtw/c/src/ext_mode/common

# Additional includes 
ADD_INCLUDES = \
|>START_EXPAND_INCLUDES<|	-I|>EXPAND_DIR_NAME<| \
|>END_EXPAND_INCLUDES<|

SHARED_INCLUDES =
ifneq ($(SHARED_SRC_DIR),)
SHARED_INCLUDES = -I$(SHARED_SRC_DIR) 
endif

INCLUDES = -I. -I$(RELATIVE_PATH_TO_ANCHOR) $(MATLAB_INCLUDES) \
           $(ADD_INCLUDES) $(MODELREF_INC_PATH) $(SHARED_INCLUDES) \
           $(TARGET_BLOCK_INCS) $(TARGET_INCS)

CFLAGS += $(subst \,/,$(INCLUDES))
CXXFLAGS += $(subst \,/,$(INCLUDES))

ifeq ($(DEBUG_BUILD),1)
# Set flags for debugging
CFLAGS += $(CDEBUG)
CXXFLAGS += $(CXXDEBUG)
LDFLAGS += $(LDDEBUG)
endif
#-------------------------------- Target application --------------------------------------
# Define the target file

ifeq ($(MODELREF_TARGET_TYPE), NONE)	
ifeq ($(MAKEFILEBUILDER_TGT), 0)
ifeq ($(STANDALONE_SUPPRESS_EXE), 1)
# Build object code only for top level model (preliminary step for building
# PIL application)
BUILD_MODE=pil_prebuild
PRODUCT=ObjectModules
BUILD_PRODUCT_TYPE = object modules
else
# Building executable for real-time deployment
BUILD_MODE=real_time
PRODUCT = $(MODEL)$(EXE_FILE_EXT)
BUILD_PRODUCT_TYPE = executable
endif
else
# Building executable for deployment as PIL application (non-real-time 
# simulation)
BUILD_MODE=pil_application
PRODUCT = $(MODEL)$(EXE_FILE_EXT)
BUILD_PRODUCT_TYPE = executable
endif
else
# Building a library for a referenced model
BUILD_MODE = model_reference
PRODUCT = $(MODELLIB)
BUILD_PRODUCT_TYPE = library
endif

#-------------- Source Files, Object Files and Dependency Files -----------

SRCS = $(ADD_SRCS) $(S_FUNCTIONS)

ifeq ($(BUILD_MODE), pil_prebuild)
  SRCS += $(MODULES) $(MODEL).$(TARGET_LANG_EXT) $(EXT_SRC)
endif

ifeq ($(BUILD_MODE), pil_application)
  SRCS += $(TARGET_SRCS) $(TARGET_BLOCK_SRCS)
  PREBUILT_SRCS      = $(subst \,/,$(MODULES))
  PREBUILT_OBJS      = $(addsuffix $(OBJ_EXT), $(basename $(PREBUILT_SRCS)))
endif

ifeq ($(BUILD_MODE), real_time)
  SRCS += $(MODULES) $(MODEL).$(TARGET_LANG_EXT) $(EXT_SRC) ert_main.c
  SRCS += $(TARGET_BLOCK_SRCS) $(TARGET_SRCS) 
endif

ifeq ($(BUILD_MODE), model_reference)
  SRCS += $(MODULES)
endif

OBJS = $(subst \,/,$(addsuffix $(OBJ_EXT), $(basename $(SRCS)))) 

LIBS = $(S_FUNCTIONS_LIB)

SHARED_SRC := $(subst \,/,$(SHARED_SRC))
SHARED_SRC := $(wildcard $(SHARED_SRC))
SHARED_OBJS = $(addsuffix $(OBJ_EXT), $(basename $(SHARED_SRC)))
SHARED_OBJS := $(subst \,/,$(SHARED_OBJS))
SHARED_LIB := $(subst \,/,$(SHARED_LIB))
MODELLIB := $(subst \,/,$(MODELLIB))

# Define path to search for source files
VPATH = $(TARGET_BLOCK_DIR) $(TARGET_SRC_DIR)

#-------------- Default target -----------
TARGETS = $(PRODUCT)

all: $(TARGETS)

# Need a rule to generate the build success string if product was already up to date
.PHONY : all
all : $(PRODUCT)
	@echo "### Created $(PRODUCT) successfully (or it was already up to date)"

#----------------------------- Dependencies ------------------------------------

$(OBJS) : $(MAKEFILE) rtw_proj.tmw

$(SHARED_LIB) : $(SHARED_OBJS)
	@echo "### Creating $@ "
	$(AR) $(ARFLAGS) $@ $(SHARED_OBJS)
	@echo "### $@ Created "

##-------------------------- Support for building modules ----------------------
ifeq ($(BUILD_MODE), pil_prebuild)
$(PRODUCT) : $(OBJS)
	@echo "### BUILD_MODE $(BUILD_MODE)"
	@echo "### Created $(PRODUCT)"
endif

ifeq ($(BUILD_MODE), real_time)
$(MODEL)$(BINARY_FILE_EXT) : $(MODEL)$(PROGRAM_FILE_EXT)
	@echo "### BUILD_MODE $(BUILD_MODE)"
	$(OBJCOPY) $(OBJCOPYFLAGS) $< $@
	@echo "### Generated $(PRODUCT)"
endif

ifeq ($(BUILD_MODE), pil_application)
$(MODEL)$(BINARY_FILE_EXT) : $(MODEL)$(PROGRAM_FILE_EXT)
	@echo "### BUILD_MODE $(BUILD_MODE)"
	$(OBJCOPY) $(OBJCOPYFLAGS) $< $@
	@echo "### Generated $(PRODUCT)"
endif

ifeq ($(BUILD_MODE), model_reference)
$(PRODUCT) : $(OBJS) $(SHARED_LIB) $(LIBS) 
	@echo "### BUILD_MODE $(BUILD_MODE)"
	@echo "### Linking ..."
	$(AR) $(ARFLAGS) $@ $(OBJS)
	@echo "### Generated $@"
endif

ifeq ($(BUILD_MODE), pil_application)
$(MODEL)$(PROGRAM_FILE_EXT): $(PREBUILT_OBJS) $(OBJS) $(MODELLIB) $(MODELREF_LINK_LIBS) $(SHARED_LIB) $(LIBS)
	@echo "### BUILD_MODE $(BUILD_MODE)"
	$(LD) $(LDFLAGS) $^ $(LDOUTPUTFLAG)$@ 
	@echo "### Generated $@"
endif

ifeq ($(BUILD_MODE), real_time)
$(MODEL)$(PROGRAM_FILE_EXT): $(OBJS) $(MODELREF_LINK_LIBS) $(SHARED_LIB) $(LIBS)
	@echo "### BUILD_MODE $(BUILD_MODE)"
	$(LD) $(LDFLAGS) $^ $(LDOUTPUTFLAG)$@ 
	@echo "### Generated $@"
endif

%$(OBJ_EXT) : $(subst \,/,$(RELATIVE_PATH_TO_ANCHOR))/%.c
	$(CC) -c $(CFLAGS) $< $(CCOUTPUTFLAG)$@ 

%$(OBJ_EXT): $(subst \,/,$(RELATIVE_PATH_TO_ANCHOR))/%.cpp
	$(CXX) -c $(CXXFLAGS) $< $(CCOUTPUTFLAG)$@ 

%$(OBJ_EXT): %.cpp
	$(CXX) -c $(CXXFLAGS) $< $(CCOUTPUTFLAG)$@ 

%$(OBJ_EXT): %.c
	$(CC) -c $(CFLAGS) $< $(CCOUTPUTFLAG)$@ 

|>START_EXPAND_RULES<|%$(OBJ_EXT) : $(subst \,/,|>EXPAND_DIR_NAME<|)/%.cpp
	$(CXX) -c $(CXXFLAGS) $< $(CCOUTPUTFLAG)$@ 

|>END_EXPAND_RULES<|

|>START_EXPAND_RULES<|%$(OBJ_EXT) : $(subst \,/,|>EXPAND_DIR_NAME<|)/%.c
	$(CC) -c $(CFLAGS) $< $(CCOUTPUTFLAG)$@ 

|>END_EXPAND_RULES<|
